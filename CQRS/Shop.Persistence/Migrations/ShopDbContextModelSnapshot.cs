// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Persistence.Contexts;

#nullable disable

namespace Shop.Persistence.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    partial class ShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("shop")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.ToTable("Categories", "shop");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3574425b-a905-4591-ba8c-f5551a3c6efd"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2144),
                            Name = "Grocery"
                        },
                        new
                        {
                            Id = new Guid("36d0d944-3478-446b-8032-06bb6166599f"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2145),
                            Name = "Fruits & Vegatables"
                        },
                        new
                        {
                            Id = new Guid("3139afc7-9ce9-4b2d-b44d-87b89c981e38"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2147),
                            Name = "Meat & Fish"
                        });
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.ToTable("Customers", "shop");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca49622e-c788-4bc1-89f3-52e620c1f220"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2240),
                            FirstName = "Employee",
                            LastName = "Employee"
                        },
                        new
                        {
                            Id = new Guid("89379877-68fc-49a5-8655-d2a038262138"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2241),
                            FirstName = "Affiliate",
                            LastName = "Affiliate"
                        },
                        new
                        {
                            Id = new Guid("d9aa2403-1442-4622-b31d-45cf53c5746e"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2243),
                            FirstName = "StardardAccount",
                            LastName = "StardardAccount"
                        });
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.CustomerRoleRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<DateTime?>("LastValidTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastValidTime");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoleId");

                    b.ToTable("CustomerRoleRelations", "shop");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2f76b49-063f-4e61-8687-ec19e30e3d02"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2255),
                            CustomerId = new Guid("ca49622e-c788-4bc1-89f3-52e620c1f220"),
                            RoleId = new Guid("16038a01-51b7-40a6-a8d3-f76c767bf240")
                        },
                        new
                        {
                            Id = new Guid("073c5288-2fd0-48dd-86c8-7b45dd8cb57a"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2257),
                            CustomerId = new Guid("89379877-68fc-49a5-8655-d2a038262138"),
                            RoleId = new Guid("2abc20da-3e33-4e06-9e68-ea86247ddf7d")
                        },
                        new
                        {
                            Id = new Guid("249241ad-91b6-4490-b65b-1f5654bcec13"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2259),
                            CustomerId = new Guid("d9aa2403-1442-4622-b31d-45cf53c5746e"),
                            RoleId = new Guid("feebd82d-e26c-40f8-b00d-70574b23a288")
                        });
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<int>("DiscountUsageType")
                        .HasColumnType("int")
                        .HasColumnName("DiscountUsageType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("Discounts", "shop");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b21fdd1-3d87-461f-b1e4-8643e6dbd09b"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2118),
                            DiscountUsageType = 10,
                            Name = "30% Discount",
                            Priority = 1,
                            Value = 30m
                        },
                        new
                        {
                            Id = new Guid("d567b4dd-03fd-450e-bb95-84f0c8902368"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2123),
                            DiscountUsageType = 10,
                            Name = "10% Discount",
                            Priority = 2,
                            Value = 10m
                        },
                        new
                        {
                            Id = new Guid("76d0c4af-2ae4-46da-97df-6e0db3b22fba"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2125),
                            DiscountUsageType = 10,
                            Name = "5% Discount If Over 2 Year",
                            Priority = 3,
                            Value = 5m
                        },
                        new
                        {
                            Id = new Guid("6688e075-61c3-4532-8861-4a848f7b3ce9"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2127),
                            DiscountUsageType = 20,
                            Name = "$5 Discount For every $100",
                            Priority = 4,
                            Value = 5m
                        });
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.DiscountCriterion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<string>("Criterion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Criterion");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<int>("DiscountAssignType")
                        .HasColumnType("int")
                        .HasColumnName("DiscountAssignType");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DiscountId");

                    b.Property<int>("FilterOperator")
                        .HasColumnType("int")
                        .HasColumnName("FilterOperator");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("DiscountCriteria", "shop");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4784ee61-8833-4488-9c16-d5c46a33134e"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2159),
                            Criterion = "16038a01-51b7-40a6-a8d3-f76c767bf240",
                            DiscountAssignType = 10,
                            DiscountId = new Guid("5b21fdd1-3d87-461f-b1e4-8643e6dbd09b"),
                            FilterOperator = 1
                        },
                        new
                        {
                            Id = new Guid("e9169085-5ca1-451b-8ee1-efdcd8f94c08"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2174),
                            Criterion = "2abc20da-3e33-4e06-9e68-ea86247ddf7d",
                            DiscountAssignType = 10,
                            DiscountId = new Guid("d567b4dd-03fd-450e-bb95-84f0c8902368"),
                            FilterOperator = 1
                        },
                        new
                        {
                            Id = new Guid("cd937daa-21f1-4e33-bed7-127524c3a9f2"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2178),
                            Criterion = "2",
                            DiscountAssignType = 20,
                            DiscountId = new Guid("76d0c4af-2ae4-46da-97df-6e0db3b22fba"),
                            FilterOperator = 6
                        },
                        new
                        {
                            Id = new Guid("8f77bce9-4337-4fbe-8f3b-faa63c4f2d87"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2182),
                            Criterion = "100",
                            DiscountAssignType = 30,
                            DiscountId = new Guid("6688e075-61c3-4532-8861-4a848f7b3ce9"),
                            FilterOperator = 4
                        },
                        new
                        {
                            Id = new Guid("33df01ec-8c26-46e3-a5d1-0d5576ca1497"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2185),
                            Criterion = "3574425b-a905-4591-ba8c-f5551a3c6efd",
                            DiscountAssignType = 40,
                            DiscountId = new Guid("76d0c4af-2ae4-46da-97df-6e0db3b22fba"),
                            FilterOperator = 2
                        },
                        new
                        {
                            Id = new Guid("96336178-25f9-4f67-b3c3-35f6bde4e4ba"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2189),
                            Criterion = "3574425b-a905-4591-ba8c-f5551a3c6efd",
                            DiscountAssignType = 40,
                            DiscountId = new Guid("d567b4dd-03fd-450e-bb95-84f0c8902368"),
                            FilterOperator = 2
                        },
                        new
                        {
                            Id = new Guid("d966e27e-cea0-47df-bcaa-4bad8b532dd2"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2192),
                            Criterion = "3574425b-a905-4591-ba8c-f5551a3c6efd",
                            DiscountAssignType = 40,
                            DiscountId = new Guid("5b21fdd1-3d87-461f-b1e4-8643e6dbd09b"),
                            FilterOperator = 2
                        });
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", "shop");

                    b.HasData(
                        new
                        {
                            Id = new Guid("feb5afd5-861a-42fa-8784-dc62d63f9a52"),
                            CategoryId = new Guid("3139afc7-9ce9-4b2d-b44d-87b89c981e38"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2270),
                            Name = "Beef"
                        },
                        new
                        {
                            Id = new Guid("1f1437a8-0c02-4be5-85f3-7fe5011a663d"),
                            CategoryId = new Guid("36d0d944-3478-446b-8032-06bb6166599f"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2272),
                            Name = "Banana"
                        },
                        new
                        {
                            Id = new Guid("75d9dea7-a81b-4775-803a-ab29b88a2527"),
                            CategoryId = new Guid("3574425b-a905-4591-ba8c-f5551a3c6efd"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(2274),
                            Name = "Cigarette"
                        });
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.ToTable("Roles", "shop");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16038a01-51b7-40a6-a8d3-f76c767bf240"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(1975),
                            Name = "Employee"
                        },
                        new
                        {
                            Id = new Guid("2abc20da-3e33-4e06-9e68-ea86247ddf7d"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(1986),
                            Name = "Affiliate"
                        },
                        new
                        {
                            Id = new Guid("feebd82d-e26c-40f8-b00d-70574b23a288"),
                            CreatedTime = new DateTime(2023, 11, 29, 11, 7, 28, 657, DateTimeKind.Local).AddTicks(1988),
                            Name = "StardardAccount"
                        });
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.CustomerRoleRelation", b =>
                {
                    b.HasOne("Shop.Domain.RelationalEntities.Customer", "Customer")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shop.Domain.RelationalEntities.Role", "Role")
                        .WithMany("RoleCustomers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.DiscountCriterion", b =>
                {
                    b.HasOne("Shop.Domain.RelationalEntities.Discount", "Discount")
                        .WithMany("DiscountCriteria")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Product", b =>
                {
                    b.HasOne("Shop.Domain.RelationalEntities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Customer", b =>
                {
                    b.Navigation("CustomerRoles");
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Discount", b =>
                {
                    b.Navigation("DiscountCriteria");
                });

            modelBuilder.Entity("Shop.Domain.RelationalEntities.Role", b =>
                {
                    b.Navigation("RoleCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
